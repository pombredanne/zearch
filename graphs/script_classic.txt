<svg id="svg`'__NAME__`'" width="1400" height="700"></svg>
<script>
(function() {
// Draw a line chart
var svg = d3.select("`#'svg`'__NAME__`'"),
  margin = { top: 100, right: 170, bottom: 100, left: 100 },
  width = +svg.attr('width') - margin.left - margin.right,
  height = +svg.attr('height') - margin.top - margin.bottom,
  g = svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
// Graph title
g.append('text')
  .attr('x', (width / 2))
  .attr('y', 0 - (margin.top / 2))
  .attr('text-anchor', 'middle')
  .style('font-size', '20px')
  .text('Search in __SIZE__ __TYPE__')
  .style('font-style', "italic");

// Set the X scale
var x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
var x1 = d3.scale.ordinal();
// Set the Y scale
var y = d3.scale.linear().range([height, 0]);

var xAxis = d3.svg.axis()
.scale(x)
.orient("bottom");

var yAxis = d3.svg.axis()
.scale(y)
.orient("left");

var translator = {};
translator["zearch"] = "zearch";
translator["grep"] = "grep";
translator["ripgrep"] = "ripgrep";
translator["hyperscan"] = "hyperscan";
translator["zhs_lz4_p"] = "lz4|hyperscan";
translator["zhs_zstd_p"] = "zstd|hyperscan";
translator["zgrep_lz4_p"] = "lz4|grep";
translator["zgrep_zstd_p"] = "zstd|grep";
translator["zrg_lz4_p"] = "lz4|ripgrep";
translator["zrg_zstd_p"] = "zstd|ripgrep";
translator["repair"] = "repair";
translator["lz4"] = "lz4";
translator["zstd"] = "zstd";
translator["gzip"] = "gzip";

var tip = d3.tip()
  .attr('class', 'd3-tip')
  .offset([-10, 0])
  .html(function(d) {
    if (this.parentNode.__data__.name == "lz4" || this.parentNode.__data__.name == "zstd" || this.parentNode.__data__.name == "gzip" || this.parentNode.__data__.name == "repair") {
      return "<strong>No count. Just decompress</strong><br><strong>Time:</strong><span style='color:red'>" + d.worth + "</span>";
    }
    else if(d.matchesg == null && d.matchesr == null && d.matchesgg == null) return "<strong>Tool:</strong> <span style='color:lightblue'>" + translator[this.parentNode.__data__.name] + "</span><br><strong>Time(ms): </strong><span style='color:red'>" + d.worth + "&plusmn" + d.err + "</span>";
    else if (this.parentNode.__data__.name == "GNgrep") return "<strong>Matches:</strong> <span style='color:red'>" + d.matchesn + "</span><br><strong>Time(ms): </strong><span style='color:red'>" + d.worth + "&plusmn" + d.err +"</span>";
    else return "<strong>Tool:</strong> <span style='color:lightblue'>" + translator[this.parentNode.__data__.name] + "</span><br><strong>Matches:</strong> <span style='color:red'>" + d.matchesg + "</span><br><strong>Time(ms): </strong><span style='color:red'>" + d.worth + "&plusmn" + d.err +"</span>";
  });

svg.call(tip);

var counter = 0;
  // load the data
d3.json("`'__NAME__`'.json", function(error, data) {
  var xDomain = [];
  // Correct the types
  data.forEach(function(d) {
    xDomain.push(d.Regex);
  });
  console.log(data);

  var tools = color.domain().map(function(name) {
   return {
      name: name,
      values: data.map(function(d) {
        return {
          Regex: d.Regex,
          matchesg: d.MatchesZ,
          matchesr: d.MatchesR,
          matchesgg: d.MatchesGG,
          matchesh: d.MatchesH,
          matchesn: d.MatchesN,
          worth: (name in d ? +d[name].avg : 0),
          err: (name in d ? +d[name].err : 0)
        };
      })
    };
  });
  console.log(tools)
  // Set the X domains
  x.domain(xDomain);
  x1.domain(d3.keys(data[data.length-1]).filter(function(key) {
      return key !== "Regex" && key !== "MatchesG" && key !== "MatchesR" && key !== "MatchesGG" && key !== "gzip" && key !== "repair" && key !== "zstd" && key !== "lz4" && key !== "MatchesH";
  })).rangeRoundBands([0, x.rangeBand()]);
  // Set the Y domain
  y.domain([
    0,
    d3.max(tools, function(c) {
      return d3.max(c.values, function(v) {
        return v.worth;
      });
    })
  ]);
  // Set the X axis
  g.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);
  // Set the Y axis
  g.append("g")
    .attr("class", "y axis")
    .call(yAxis)
    .append("text")
    .attr("transform", "translate(40,-40)")
    .attr("y", 6)
    .attr("dy", ".71em")
    .style("text-anchor", "end")
    .text("Time (ms)");

  // Draw the bars
  var state = g.selectAll(".regex")
      .data(tools)
      .enter().append("g")
      .attr("class", "regex")
      .attr("transform", function(d) { return "translate(" + x1(d.name) + ",0)"; });

  state.selectAll("rect")
      .data(function(d) {
      if (d.name !== "gzip" && d.name !== "repair" && d.name !== "zstd" && d.name !== "lz4")
          return d.values;
        else
          return []; })
      .enter()
      .append("rect")
      .attr("width", x1.rangeBand())
      .attr("x", function(d) { return x(d.Regex); })
      .attr("y", function(d) { return y(d.worth); })
      .on('mouseover', tip.show)
      .on('mouseout', tip.hide)
      .attr("height", function(d) { return height - y(d.worth); })
      .style("stroke-width", "0.5")
      .style("stroke", "black")
      .style("fill", function(d){return color(this.parentNode.__data__.name)});

  // Draw the errors
  state.selectAll("line")
      .data(function(d) {
      if (d.name !== "gzip" && d.name !== "repair" && d.name !== "zstd" && d.name !== "lz4")
          return d.values;
        else
          return []; })
      .enter()
      .append("line")
      .attr("x1", function(d) { return x(d.Regex) + x1.rangeBand()/2; })
      .attr("x2", function(d) { return x(d.Regex) + x1.rangeBand()/2; })
      .attr("y1", function(d) { return y(d.worth-d.err); })
      .attr("y2", function(d) { return y(d.worth+d.err); })
      .style("stroke-width", "4")
      .style("stroke", "black");

  // Draw the lines
  // gzip
  var sum = 0;
  var idx;
  for (idx = 0; idx < tools.length; idx++){
    if (tools[idx].name == "gzip") break;
  }
  var avg = tools[idx].values[tools[idx].values.length-1].worth;
  g.append("line")
    .style("stroke", color("gzip"))
    .style("stroke-width", "3")
    .style("stroke-dasharray", ("6, 3"))
    .attr("x1", 0)
    .attr("y1", y(avg))
    .attr("x2", width)
    .attr("y2", y(avg));

  // repair
  sum = 0;
  idx = 0;
  for (idx = 0; idx <= tools.length; idx++){
    if (tools[idx].name == "repair") break;
  }
  avg = tools[idx].values[tools[idx].values.length-1].worth;
  g.append("line")
    .style("stroke", color("repair"))
    .style("stroke-width", "3")
    .style("stroke-dasharray", ("6, 3"))
    .attr("x1", 0)
    .attr("y1", y(avg))
    .attr("x2", width)
    .attr("y2", y(avg));

  // lz4
  sum = 0;
  idx = 0;
  for (idx = 0; idx <= tools.length; idx++){
    if (tools[idx].name == "lz4") break;
  }
  avg = tools[idx].values[tools[idx].values.length-1].worth;
  g.append("line")
    .style("stroke", color("lz4"))
    .style("stroke-width", "3")
    .style("stroke-dasharray", ("6, 3"))
    .attr("x1", 0)
    .attr("y1", y(avg))
    .attr("x2", width)
    .attr("y2", y(avg));

  // zstd
  sum = 0;
  idx = 0;
  for (idx = 0; idx <= tools.length; idx++){
    if (tools[idx].name == "zstd") break;
  }
  avg = tools[idx].values[tools[idx].values.length-1].worth;
  g.append("line")
    .style("stroke", color("zstd"))
    .style("stroke-width", "3")
    .style("stroke-dasharray", ("6, 3"))
    .attr("x1", 0)
    .attr("y1", y(avg))
    .attr("x2", width)
    .attr("y2", y(avg));

  var legend = svg.selectAll(".legend")
      .data(color.domain())
      .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(" + (margin.right +margin.left) + ", " + (i * 25 + (d == "zstd" || d == "lz4" || d == "gzip" || d == "repair" ? 20 : 0)) + ")"; });

  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return translator[d]; });

});
})();
</script>
