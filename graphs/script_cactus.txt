<svg id="svg`'__NAME__`'" width="1100" height="700"></svg>
<script>
var translator = {};
translator["zearch"] = "zearch";
translator["grep"] = "grep";
translator["ripgrep"] = "ripgrep";
translator["hyperscan"] = "hyperscan";
translator["zhs_lz4_p"] = "lz4|hyperscan";
translator["zhs_zstd_p"] = "zstd|hyperscan";
translator["zgrep_lz4_p"] = "lz4|grep";
translator["zgrep_zstd_p"] = "zstd|grep";
translator["zrg_lz4_p"] = "lz4|ripgrep";
translator["zrg_zstd_p"] = "zstd|ripgrep";
translator["repair"] = "repair";
translator["lz4"] = "lz4";
translator["zstd"] = "zstd";
translator["gzip"] = "gzip";
(function() {
// Draw a line chart
var svg = d3.select("`#'svg`'__NAME__`'"),
  margin = { top: 100, right: 300, bottom: 100, left: 200 },
  width = +svg.attr('width') - margin.left - margin.right,
  height = +svg.attr('height') - margin.top - margin.bottom,
  g = svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
// Graph title
g.append('text')
  .attr('x', (width / 2))
  .attr('y', 0 - (margin.top / 2))
  .attr('text-anchor', 'middle')
  .style('font-size', '20px')
  .text('Cactus diagram for searching in __SIZE__ __TYPE__')
  .style('font-style', "italic");

// Set the X scale
var x = d3.scale.linear().range([0, width]);
// Set the Y scale
var y = d3.scale.linear().range([height, 0]);

var xAxis = d3.svg.axis()
.scale(x)
.orient("bottom");

var yAxis = d3.svg.axis()
.scale(y)
.orient("left");

var line = d3.svg.line()
// .interpolate("basis")
.x(function(d) {
  return x(d.Regex);
})
.y(function(d) {
  return y(d.worth);
});

var counter = 0;
  // load the data
d3.json("__NAME__.json", function(error, data) {
  var tools = color.domain().map(function(name) {
    return {
      name: name,
      values: data.map(function(d) {
        return {
          Regex: d.Regex,
          worth: +d[name]
        };
      })
    };
  });
  console.log(tools)
  // Set the X domain
  x.domain(d3.extent(data, function(d) {
    return d.Regex;
  }));
  // Set the Y domain
  y.domain([
    d3.min(tools, function(c) {
      return d3.min(c.values, function(v) {
        return v.worth;
      });
    }),
    d3.max(tools, function(c) {
      return d3.max(c.values, function(v) {
        return v.worth;
      });
    })
  ]);
  // Set the X axis
  g.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis)
    .append("text")
    .attr("transform", "translate(" + (width + 80) + " ,20)")
    .style("text-anchor", "middle")
    .text("Num regexs");
  // Set the Y axis
  g.append("g")
    .attr("class", "y axis")
    .call(yAxis)
    .append("text")
    .attr("transform", "translate(40,-40)")
    .attr("y", 6)
    .attr("dy", ".71em")
    .style("text-anchor", "end")
    .text("Time (ms)");

  // Draw the lines
  var tool = g.selectAll(".tool")
    .data(tools)
    .enter().append("g")
    .attr("class", "tool");

  tool.append("path")
    .attr("class", "line")
    .attr("d", function(d) {
      return line(d.values);
    })
    .style("stroke", function(d) {
      return color(d.name);
    });
  // Add the circles
  tool.append("g").selectAll("circle")
    .data(function(d){return d.values})
    .enter()
    .append("circle")
    .attr("r", 2)
    .attr("opacity", function(dd){if (isNaN(dd.worth)) return 0; else return 1; })
    .attr("cx", function(dd){return x(dd.Regex)})
    .attr("cy", function(dd){return y(dd.worth)})
    .attr("fill", "none")
    .attr("stroke", function(d){return color(this.parentNode.__data__.name)});

// Add the legend
var legend = svg.selectAll(".legend")
      .data(d3.keys(data[0]).filter(function(key) {
      return key !== "Regex" && key !== "MatchesG" && key !== "MatchesR" && key !== "Ignore" && key !== "MatchesH";
  }).slice())
      .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(" + (margin.right + margin.left) + ", " + i * 25 + ")"; });

  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return translator[d]; });

// Add the info`'__NAME__`'
var info`'__NAME__`' = svg.selectAll(".info`'__NAME__`'")
      .data(d3.keys(data[0]).filter(function(key) {
      return key !== "Regex" && key !== "MatchesG" && key !== "MatchesR" && key !== "Ignore";
  }).slice())
      .enter().append("g")
      .attr("class", "info`'__NAME__`'")
      .style("opacity", 0)
      .attr("transform", function(d, i) { return "translate(" + (margin.right + margin.left) + ", " + (270 + i * 25) + ")"; });

  info`'__NAME__`'.append("text")
      .attr("x", width)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .style("font-weight", "bold")
      .text(function(d) { return d+":"; });

// Add the mouse line
var mouseG = g.append("g")
  .attr("class", "mouse-over-effects`'__NAME__`'");

mouseG.append("path")
  .attr("class", "mouse-line`'__NAME__`'")
  .style("stroke", "black")
  .style("stroke-dasharray", ("5, 5"))
  .style("stroke-width", "2px")
  .style("opacity", "0");

var mousePerLine = mouseG.selectAll('.mouse-per-line`'__NAME__`'')
  .data(tools)
  .enter()
  .append("g")
  .attr("class", "mouse-per-line`'__NAME__`'");

// Append a rect to catch mouse movements on canvas
mouseG.append('svg:rect')
  .attr('width', width)
  .attr('height', height)
  .attr('fill', 'none')
  .attr('pointer-events', 'all')
  .on('mouseout', function () { // on mouse out hide line, circles and text
    d3.selectAll(".info`'__NAME__`'").style("opacity", "0")
    d3.select(".mouse-line`'__NAME__`'")
      .style("opacity", "0");
    d3.selectAll(".mouse-per-line`'__NAME__`' circle")
      .style("opacity", "0");
    d3.selectAll(".mouse-per-line`'__NAME__`' text")
      .style("opacity", "0");
  })
  .on('mouseover', function () { // on mouse in show line, circles and text
    d3.selectAll(".info`'__NAME__`'").style("opacity", "1")
    d3.select(".mouse-line`'__NAME__`'")
      .style("opacity", "1");
    d3.selectAll(".mouse-per-line`'__NAME__`' circle")
      .style("opacity", "1");
    d3.selectAll(".mouse-per-line`'__NAME__`' text")
      .style("opacity", "1");
  })
  .on('mousemove', function () { // mouse moving over canvas
    var mouse = d3.mouse(this);

    d3.selectAll(".mouse-per-line`'__NAME__`'")
      .attr("transform", function (d, i) {

        var xPos = mouse[0];
        var err = width / (2 * d.values.length);
        for(idx=0; (x(d.values[idx].Regex) < (xPos - err)) || (x(d.values[idx].Regex) > (xPos + err)); idx++);

        if (!isNaN(d.values[idx].worth)) {
          d3.select(this).select('text')
            .text(y.invert(y(d.values[idx].worth)).toFixed(2));
        } else {
          d3.select(this).select('text').text("");
          d3.select(this).select('circle').style("opacity", 0);
        }

        d3.select(".mouse-line`'__NAME__`'")
          .attr("d", function () {
            var data = "M" + x(d.values[idx].Regex) + "," + height;
            data += " " + x(d.values[idx].Regex) + "," + 0;
            return data;
          });

        d3.selectAll(".info`'__NAME__`'")[0][i].childNodes[0].innerHTML=translator[d.name]+": "+d.values[idx].worth;
        d3.selectAll(".info`'__NAME__`'")[0][i].childNodes[0].style.fill=color(d.name);

        return "translate(" + x(d.values[idx].Regex) + "," + y(d.values[idx].worth) + ")";
      });
  });
});
})();
</script>
